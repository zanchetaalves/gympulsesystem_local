@echo off
color 0E
echo ========================================
echo   ATUALIZACAO SEGURA EM PRODUCAO
echo ========================================
echo.

REM Verificar se esta rodando como administrador
net session >nul 2>&1
if %errorLevel% == 0 (
    echo ‚úÖ Executando como Administrador...
) else (
    echo ‚ùå ERRO: Execute como Administrador!
    pause
    exit /b 1
)

set "PROJETO_ATUAL=C:\gym-pulse-system"
set "PROJETO_NOVO=C:\gym-pulse-system-novo"
set "BACKUP_DIR=C:\gym-pulse-system-backup-%date:~-4,4%%date:~-10,2%%date:~-7,2%"

echo.
echo üìã CONFIGURA√á√ïES:
echo Projeto atual: %PROJETO_ATUAL%
echo Projeto novo: %PROJETO_NOVO%
echo Backup: %BACKUP_DIR%
echo.

echo üìã PASSO 1: Verificando status atual...
echo.
echo Status do servi√ßo:
sc query gympulsebackend.exe | findstr "STATE"

echo.
echo Testando API atual:
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:3001/api/health' -TimeoutSec 5; Write-Host '‚úÖ API atual OK:' $r.StatusCode } catch { Write-Host '‚ùå API atual falhou:' $_.Exception.Message }"

echo.
echo Verificando uso da porta 3001:
netstat -ano | findstr :3001

echo.
echo üìã PASSO 2: Verificando projeto novo...
if not exist "%PROJETO_NOVO%" (
    echo ‚ùå ERRO: Projeto novo n√£o encontrado em %PROJETO_NOVO%
    echo.
    echo INSTRU√á√ïES:
    echo 1. Baixe/descompacte o projeto atualizado em: %PROJETO_NOVO%
    echo 2. Execute este script novamente
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Projeto novo encontrado!
echo Conte√∫do:
dir "%PROJETO_NOVO%" /b

echo.
echo üìã PASSO 3: Criando backup completo...
echo Criando backup em: %BACKUP_DIR%

if exist "%BACKUP_DIR%" (
    echo Removendo backup anterior...
    rmdir "%BACKUP_DIR%" /s /q >nul 2>&1
)

echo Copiando projeto atual para backup...
xcopy "%PROJETO_ATUAL%" "%BACKUP_DIR%\" /E /I /Y /Q >nul
if %errorLevel% == 0 (
    echo ‚úÖ Backup criado com sucesso!
) else (
    echo ‚ùå ERRO ao criar backup!
    pause
    exit /b 1
)

echo.
echo üìã PASSO 4: Parando servi√ßo backend...
echo.
sc stop gympulsebackend.exe
echo Aguardando parada do servi√ßo...
timeout /t 5 >nul

sc query gympulsebackend.exe | findstr "STATE"

echo.
echo Verificando se porta 3001 est√° livre...
netstat -ano | findstr :3001 >nul
if %errorLevel% == 0 (
    echo ‚ö†Ô∏è Porta ainda em uso, aguardando mais...
    timeout /t 10 >nul
    
    netstat -ano | findstr :3001 >nul
    if !errorLevel! == 0 (
        echo ‚ùå Processo ainda usando porta 3001
        echo For√ßando encerramento...
        for /f "tokens=5" %%a in ('netstat -ano ^| findstr :3001') do taskkill /PID %%a /F >nul 2>&1
        timeout /t 3 >nul
    )
)

echo ‚úÖ Porta 3001 liberada!

echo.
echo üìã PASSO 5: Atualizando arquivos...
echo.

REM Preservar arquivos importantes
echo Preservando arquivos de configura√ß√£o...
if exist "%PROJETO_ATUAL%\backend\.env" (
    copy "%PROJETO_ATUAL%\backend\.env" "%PROJETO_NOVO%\backend\.env.backup" >nul 2>&1
    echo ‚úÖ .env preservado
)

if exist "%PROJETO_ATUAL%\backend\daemon" (
    xcopy "%PROJETO_ATUAL%\backend\daemon" "%PROJETO_NOVO%\backend\daemon\" /E /Y /Q >nul 2>&1
    echo ‚úÖ daemon preservado
)

if exist "%PROJETO_ATUAL%\logs" (
    xcopy "%PROJETO_ATUAL%\logs" "%PROJETO_NOVO%\logs\" /E /Y /Q >nul 2>&1
    echo ‚úÖ logs preservados
)

echo.
echo Removendo projeto atual...
REM Mover ao inv√©s de deletar para seguran√ßa
if exist "%PROJETO_ATUAL%.old" rmdir "%PROJETO_ATUAL%.old" /s /q >nul 2>&1
ren "%PROJETO_ATUAL%" "gym-pulse-system.old" >nul 2>&1

echo Movendo projeto novo para local correto...
ren "%PROJETO_NOVO%" "gym-pulse-system" >nul 2>&1

if exist "%PROJETO_ATUAL%" (
    echo ‚úÖ Projeto atualizado com sucesso!
) else (
    echo ‚ùå ERRO na atualiza√ß√£o! Restaurando backup...
    ren "C:\gym-pulse-system.old" "gym-pulse-system" >nul 2>&1
    pause
    exit /b 1
)

echo.
echo üìã PASSO 6: Configurando novo projeto...
cd "%PROJETO_ATUAL%"

echo Verificando se precisa instalar depend√™ncias...
if not exist "%PROJETO_ATUAL%\backend\node_modules" (
    echo Instalando depend√™ncias do backend...
    cd "%PROJETO_ATUAL%\backend"
    call npm install --production
    if !errorLevel! neq 0 (
        echo ‚ùå ERRO ao instalar depend√™ncias!
        pause
        exit /b 1
    )
    echo ‚úÖ Depend√™ncias instaladas!
    cd "%PROJETO_ATUAL%"
)

echo.
echo Verificando se precisa fazer build do frontend...
if not exist "%PROJETO_ATUAL%\dist\index.html" (
    echo Fazendo build do frontend...
    call npm run build
    if !errorLevel! neq 0 (
        echo ‚ùå ERRO no build do frontend!
        pause
        exit /b 1
    )
    echo ‚úÖ Build do frontend conclu√≠do!
)

echo.
echo üìã PASSO 7: Restaurando configura√ß√µes...
if exist "%PROJETO_ATUAL%\backend\.env.backup" (
    echo Verificando configura√ß√µes...
    fc "%PROJETO_ATUAL%\backend\.env" "%PROJETO_ATUAL%\backend\.env.backup" >nul 2>&1
    if !errorLevel! neq 0 (
        echo Configura√ß√µes diferentes detectadas.
        echo Deseja usar a configura√ß√£o anterior? (s/n)
        set /p "usar_config_antiga="
        if /i "!usar_config_antiga!"=="s" (
            copy "%PROJETO_ATUAL%\backend\.env.backup" "%PROJETO_ATUAL%\backend\.env" >nul
            echo ‚úÖ Configura√ß√£o anterior restaurada
        )
    )
)

echo.
echo üìã PASSO 8: Reiniciando servi√ßo...
echo.
sc start gympulsebackend.exe
echo Aguardando inicializa√ß√£o...
timeout /t 10 >nul

sc query gympulsebackend.exe | findstr "STATE"

echo.
echo üìã PASSO 9: Testando aplica√ß√£o atualizada...
echo.
timeout /t 5 >nul

echo Testando backend:
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:3001/api/health' -TimeoutSec 10; Write-Host '‚úÖ Backend OK:' $r.StatusCode; Write-Host 'Response:' $r.Content } catch { Write-Host '‚ùå Backend falhou:' $_.Exception.Message }"

echo.
echo Testando frontend:
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:81' -TimeoutSec 10; Write-Host '‚úÖ Frontend OK:' $r.StatusCode } catch { Write-Host '‚ùå Frontend falhou:' $_.Exception.Message }"

echo.
echo Testando proxy da API:
powershell -Command "try { $r = Invoke-WebRequest -Uri 'http://localhost:81/api/health' -TimeoutSec 10; Write-Host '‚úÖ Proxy OK:' $r.StatusCode } catch { Write-Host '‚ùå Proxy falhou:' $_.Exception.Message }"

echo.
echo ========================================
echo   ATUALIZACAO CONCLUIDA! ‚úÖ
echo ========================================
echo.
echo üéØ RESULTADO:
echo ‚úÖ Backup criado em: %BACKUP_DIR%
echo ‚úÖ Projeto atualizado em: %PROJETO_ATUAL%
echo ‚úÖ Servi√ßo reiniciado
echo.
echo üåê TESTES:
echo Frontend: http://localhost:81/
echo API: http://localhost:81/api/health
echo.
echo üìã EM CASO DE PROBLEMAS:
echo 1. Verifique logs: type C:\gym-pulse-system\logs\error.log
echo 2. Restaurar backup: .\restaurar-backup.bat
echo.
echo üóëÔ∏è LIMPEZA (OPCIONAL):
echo - Remover projeto antigo: rmdir C:\gym-pulse-system.old /s /q
echo - Remover backup depois de confirmar: rmdir "%BACKUP_DIR%" /s /q
echo.
pause
