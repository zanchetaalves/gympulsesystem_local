@echo off
echo ======================================================
echo üõ†Ô∏è CONFIGURA√á√ÉO SERVI√áO WINDOWS - GYM PULSE
echo ======================================================

REM Verificar se est√° executando como administrador
net session >nul 2>&1
if %errorLevel% == 0 (
    echo ‚úÖ Executando como Administrador
) else (
    echo ‚ùå ERRO: Execute como Administrador!
    echo Clique com o bot√£o direito e "Executar como administrador"
    pause
    exit /b 1
)

set PROD_DIR=C:\gym-pulse-production
set SERVICE_NAME=GymPulseSystem

echo.
echo üîç Verificando se o servi√ßo j√° existe...
sc query "%SERVICE_NAME%" >nul 2>&1
if %errorlevel% == 0 (
    echo ‚ö†Ô∏è Servi√ßo %SERVICE_NAME% j√° existe. Removendo...
    sc stop "%SERVICE_NAME%" >nul 2>&1
    timeout /t 3 /nobreak >nul
    sc delete "%SERVICE_NAME%" >nul 2>&1
    timeout /t 3 /nobreak >nul
    echo ‚úÖ Servi√ßo anterior removido
)

echo.
echo üîß Criando script de inicializa√ß√£o...

REM Criar script de inicializa√ß√£o do servi√ßo
(
echo @echo off
echo cd /d "%PROD_DIR%"
echo node server-producao-unificado.js
) > "%PROD_DIR%\start-service.bat"

echo ‚úÖ Script de inicializa√ß√£o criado

echo.
echo üìù Criando servi√ßo Windows...

REM Criar o servi√ßo Windows
sc create "%SERVICE_NAME%" ^
binPath= "\"%PROD_DIR%\start-service.bat\"" ^
start= auto ^
DisplayName= "Gym Pulse System" ^
depend= "PostgreSQL" >nul 2>&1

if %errorlevel% == 0 (
    echo ‚úÖ Servi√ßo criado com sucesso
) else (
    echo ‚ùå Erro ao criar servi√ßo. Tentando m√©todo alternativo...
    
    REM M√©todo alternativo - usando node-windows se dispon√≠vel
    echo üîÑ Tentando instalar node-windows...
    cd /d "%PROD_DIR%"
    call npm install --save node-windows
    
    if %errorlevel% == 0 (
        echo ‚úÖ node-windows instalado
        
        REM Criar script de instala√ß√£o do servi√ßo
        (
        echo import { Service } from 'node-windows';
        echo.
        echo const svc = new Service({
        echo   name: 'Gym Pulse System',
        echo   description: 'Sistema de gerenciamento de academia - Gym Pulse',
        echo   script: 'C:\\gym-pulse-production\\server-producao-unificado.js',
        echo   nodeOptions: [
        echo     '--harmony',
        echo     '--max_old_space_size=4096'
        echo   ]
        echo });
        echo.
        echo svc.on('install', () => {
        echo   console.log('‚úÖ Servi√ßo instalado com sucesso!');
        echo   svc.start();
        echo });
        echo.
        echo svc.install();
        ) > "%PROD_DIR%\install-service.js"
        
        echo üöÄ Instalando servi√ßo via node-windows...
        node "%PROD_DIR%\install-service.js"
        
        if %errorlevel% == 0 (
            echo ‚úÖ Servi√ßo instalado com node-windows
        ) else (
            echo ‚ùå Falhou tamb√©m com node-windows
            echo Voc√™ precisar√° configurar manualmente
        )
    ) else (
        echo ‚ùå N√£o foi poss√≠vel instalar node-windows
        echo Configure o servi√ßo manualmente ou use outro m√©todo
    )
)

echo.
echo üöÄ Configurando inicializa√ß√£o autom√°tica...
sc config "%SERVICE_NAME%" start= auto >nul 2>&1

echo.
echo ‚ñ∂Ô∏è Iniciando servi√ßo...
sc start "%SERVICE_NAME%" >nul 2>&1

if %errorlevel% == 0 (
    echo ‚úÖ Servi√ßo iniciado com sucesso
) else (
    echo ‚ö†Ô∏è Aviso: N√£o foi poss√≠vel iniciar automaticamente
    echo Tente iniciar manualmente: sc start %SERVICE_NAME%
)

echo.
echo üîç Verificando status do servi√ßo...
timeout /t 3 /nobreak >nul
sc query "%SERVICE_NAME%"

echo.
echo üåê Testando aplica√ß√£o...
timeout /t 5 /nobreak >nul
echo Aguardando servidor inicializar...

REM Testar se a aplica√ß√£o est√° respondendo
powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost:3000/api/health' -TimeoutSec 10; if ($response.StatusCode -eq 200) { Write-Host '‚úÖ API respondendo corretamente' } else { Write-Host '‚ö†Ô∏è API retornou status:', $response.StatusCode } } catch { Write-Host '‚ùå Erro ao conectar com a API:', $_.Exception.Message }"

echo.
echo ‚úÖ ======================================================
echo üéâ CONFIGURA√á√ÉO DO SERVI√áO CONCLU√çDA!
echo ======================================================
echo.
echo üìä Comandos √∫teis:
echo    sc start %SERVICE_NAME%     - Iniciar servi√ßo
echo    sc stop %SERVICE_NAME%      - Parar servi√ßo
echo    sc query %SERVICE_NAME%     - Status do servi√ßo
echo    sc delete %SERVICE_NAME%    - Remover servi√ßo
echo.
echo üåê Acesso √† aplica√ß√£o:
echo    Frontend: http://localhost:3000
echo    API: http://localhost:3000/api/health
echo.
echo üìÅ Logs: %PROD_DIR%\logs\
echo.
pause
